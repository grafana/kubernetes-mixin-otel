apiVersion: v1
kind: Service
metadata:
  name: lgtm
spec:
  selector:
    app: lgtm
  ports:
    - name: grafana
      protocol: TCP
      port: 3000
      targetPort: 3000
    - name: otel-grpc
      protocol: TCP
      port: 4317
      targetPort: 4317
    - name: otel-http
      protocol: TCP
      port: 4318
      targetPort: 4318
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: lgtm
spec:
  replicas: 1
  selector:
    matchLabels:
      app: lgtm
  template:
    metadata:
      labels:
        app: lgtm
    spec:
      containers:
        - name: lgtm
          image: otel-lgtm-with-tar:latest
          imagePullPolicy: Never
          ports:
            - containerPort: 3000
            - containerPort: 4317
            - containerPort: 4318
          readinessProbe:
            exec:
              command:
                - cat
                - /tmp/ready
          command: ['/bin/sh']
          args:
            - -c
            - |
              # Step 1: Save all yaml files to temporary folder (if any exist)
              YAML_FILES_FOUND=false
              mkdir -p /tmp/grafana-backup
              for file in /otel-lgtm/grafana/**/*.yaml /otel-lgtm/grafana/*.yaml; do
                if [ -f "$file" ]; then
                  if [ "$YAML_FILES_FOUND" = "false" ]; then
                    echo "Backing up YAML configuration files..."
                    YAML_FILES_FOUND=true
                  fi
                  cp "$file" /tmp/grafana-backup/
                fi
              done
              [ "$YAML_FILES_FOUND" = "false" ] && echo "No YAML configuration files found to backup"
              
              # Step 2: Verify tar is available (pre-installed in custom image)
              echo "Verifying tar availability..."
              tar --version
              
              # Step 3: Download and verify Grafana 12.2.1
              echo "Downloading Grafana version 12.2.1..."
              cd /tmp
              
              # Download with error checking and debugging
              DOWNLOAD_SUCCESS=false
              echo "Attempting download..."
              if command -v curl >/dev/null 2>&1; then
                echo "Using curl to download..."
                if curl --connect-timeout 60 --max-time 300 --retry 3 --retry-delay 5 -L https://dl.grafana.com/grafana/release/12.2.1/grafana_12.2.1_18655849634_linux_amd64.tar.gz -o grafana-12.2.1.linux-amd64.tar.gz; then
                  DOWNLOAD_SUCCESS=true
                  echo "curl download completed"
                fi
              else
                echo "ERROR: curl not found, cannot download Grafana"
              fi
              
              # Show what was actually downloaded
              if [ -f "grafana-12.2.1.linux-amd64.tar.gz" ]; then
                echo "File size: $(ls -lh grafana-12.2.1.linux-amd64.tar.gz | awk '{print $5}')"
                echo "First few bytes:"
                head -c 100 grafana-12.2.1.linux-amd64.tar.gz | od -t x1 -A x | head -5
              fi
              
              # Verify the download is a valid gzip file
              if [ "$DOWNLOAD_SUCCESS" = "true" ] && [ -f "grafana-12.2.1.linux-amd64.tar.gz" ]; then
                if gzip -t grafana-12.2.1.linux-amd64.tar.gz 2>/dev/null; then
                  echo "Download verified successfully"
                  
                  # Step 4: Backup LGTM configs and upgrade Grafana binary only
                  echo "Backing up LGTM Grafana configurations..."
                  mkdir -p /tmp/lgtm-grafana-backup
                  
                  # Backup important LGTM configurations (but not the binary)
                  for dir in conf provisioning dashboards plugins data; do
                    if [ -d "/otel-lgtm/grafana/$dir" ]; then
                      echo "Backing up $dir..."
                      cp -r "/otel-lgtm/grafana/$dir" "/tmp/lgtm-grafana-backup/"
                    else
                      echo "Directory $dir not found in original installation"
                    fi
                  done
                  
                  echo "Extracting new Grafana 12.2.1..."
                  tar -xzf grafana-12.2.1.linux-amd64.tar.gz
                  
                  # Find the extracted directory
                  GRAFANA_DIR=""
                  for dir in grafana*; do
                    if [ -d "$dir" ]; then
                      GRAFANA_DIR="$dir"
                      break
                    fi
                  done
                  
                  if [ -n "$GRAFANA_DIR" ] && [ -d "$GRAFANA_DIR" ]; then
                    echo "Found extracted directory: $GRAFANA_DIR"
                    
                    # Replace Grafana binary and core files, but preserve LGTM configs
                    echo "Upgrading Grafana binary while preserving LGTM configurations..."
                    rm -rf /otel-lgtm/grafana/bin /otel-lgtm/grafana/public /otel-lgtm/grafana/scripts
                    cp -r "$GRAFANA_DIR"/bin "$GRAFANA_DIR"/public /otel-lgtm/grafana/
                    # Copy scripts directory if it exists
                    [ -d "$GRAFANA_DIR"/scripts ] && cp -r "$GRAFANA_DIR"/scripts /otel-lgtm/grafana/
                    
                    # Restore LGTM configurations
                    echo "Restoring LGTM configurations..."
                    for dir in conf provisioning dashboards plugins data; do
                      if [ -d "/tmp/lgtm-grafana-backup/$dir" ]; then
                        echo "Restoring $dir..."
                        cp -r "/tmp/lgtm-grafana-backup/$dir" /otel-lgtm/grafana/
                      fi
                    done
                    
                    rm -rf grafana-12.2.1.linux-amd64.tar.gz "$GRAFANA_DIR"
                  else
                    echo "ERROR: Could not find extracted Grafana directory"
                  fi
                  echo "Grafana 12.2.1 upgrade completed"
                else
                  echo "ERROR: Downloaded file is not a valid gzip archive"
                  echo "Keeping existing Grafana installation"
                  rm -f grafana-12.2.1.linux-amd64.tar.gz
                fi
              else
                echo "ERROR: Failed to download Grafana 12.2.1"
                echo "Keeping existing Grafana installation"
              fi
              
              # Step 5: Copy back the yaml files from tmp folder (if any were backed up)
              if [ "$YAML_FILES_FOUND" = "true" ]; then
                echo "Restoring YAML configuration files..."
                cp /tmp/grafana-backup/* /otel-lgtm/grafana/conf/
              fi
              
              # Step 6: Apply custom configuration and set up LGTM observability
              cp /k3d-volume/custom.ini /otel-lgtm/grafana/conf
              
              # Add required encryption configuration for Grafana 12.2.1
              echo "Adding encryption configuration for Grafana 12.2.1..."
              SECRET_KEY=$(head -c 32 /dev/urandom | base64 | tr -d '=' | head -c 32)
              echo "Generated encryption secret key: ${SECRET_KEY:0:8}..."
              
              # Debug: Check what config files exist and their locations
              echo "Checking Grafana configuration files:"
              find /otel-lgtm/grafana -name "*.ini" -o -name "grafana.ini" 2>/dev/null || echo "No INI files found"
              
              # Write encryption config to multiple possible locations
              for config_file in "/otel-lgtm/grafana/conf/custom.ini" "/otel-lgtm/grafana/conf/grafana.ini" "/otel-lgtm/grafana/conf/defaults.ini"; do
                if [ -f "$config_file" ] || [ "$config_file" = "/otel-lgtm/grafana/conf/custom.ini" ]; then
                  echo "Adding encryption config to: $config_file"
                  echo "" >> "$config_file"
                  echo "# Encryption configuration required for Grafana 12.2.1" >> "$config_file"
                  echo "[security.encryption]" >> "$config_file"
                  echo "provider = secretKey.v1" >> "$config_file"
                  echo "" >> "$config_file"
                  echo "[security.encryption.secretKey.v1]" >> "$config_file"
                  echo "secret = $SECRET_KEY" >> "$config_file"
                  echo "label = default" >> "$config_file"
                fi
              done
              
              # Verify the configuration in all config files
              echo "Final configuration verification:"
              for config_file in "/otel-lgtm/grafana/conf/custom.ini" "/otel-lgtm/grafana/conf/grafana.ini"; do
                if [ -f "$config_file" ]; then
                  echo "=== Contents of $config_file ==="
                  cat "$config_file"
                  echo "=== End of $config_file ==="
                fi
              done
              
              # Create provisioning structure for LGTM observability stack
              echo "Setting up LGTM observability provisioning..."
              mkdir -p /otel-lgtm/grafana/conf/provisioning/datasources
              mkdir -p /otel-lgtm/grafana/conf/provisioning/dashboards
              
              # Create data source configurations for LGTM stack
              cat > /otel-lgtm/grafana/conf/provisioning/datasources/lgtm-datasources.yaml << 'EOF'
              apiVersion: 1
              datasources:
                - name: Prometheus
                  type: prometheus
                  access: proxy
                  url: http://localhost:9090
                  isDefault: true
                  editable: true
                - name: Loki
                  type: loki
                  access: proxy
                  url: http://localhost:3100
                  editable: true
                - name: Tempo
                  type: tempo
                  access: proxy
                  url: http://localhost:3200
                  editable: true
                - name: Pyroscope
                  type: pyroscope
                  access: proxy
                  url: http://localhost:4040
                  editable: true
              EOF
              
              # Create dashboard provisioning config
              cat > /otel-lgtm/grafana/conf/provisioning/dashboards/lgtm-dashboards.yaml << 'EOF'
              apiVersion: 1
              providers:
                - name: 'LGTM Stack'
                  orgId: 1
                  folder: 'LGTM'
                  type: file
                  disableDeletion: false
                  editable: true
                  updateIntervalSeconds: 10
                  allowUiUpdates: true
                  options:
                    path: /otel-lgtm/grafana/dashboards
              EOF
              
              # Create dashboards directory and basic monitoring dashboard
              mkdir -p /otel-lgtm/grafana/dashboards
              cat > /otel-lgtm/grafana/dashboards/lgtm-overview.json << 'EOF'
              {
                "dashboard": {
                  "id": null,
                  "title": "LGTM Stack Overview",
                  "tags": ["lgtm", "observability"],
                  "timezone": "browser",
                  "panels": [
                    {
                      "id": 1,
                      "title": "System Metrics",
                      "type": "stat",
                      "targets": [
                        {
                          "expr": "up",
                          "legendFormat": "Services Up"
                        }
                      ],
                      "gridPos": {
                        "h": 8,
                        "w": 12,
                        "x": 0,
                        "y": 0
                      }
                    }
                  ],
                  "time": {
                    "from": "now-1h",
                    "to": "now"
                  },
                  "refresh": "5s"
                }
              }
              EOF
              
              echo "LGTM observability provisioning setup completed"
              
              # Execute run-all.sh (change to correct directory first)
              cd /otel-lgtm
              exec ./run-all.sh
          # NOTE: By default OpenShift does not allow writing the root directory.
          # Thats why the data dirs for grafana, prometheus and loki can not be
          # created and the pod never becomes ready.
          # See: https://github.com/grafana/docker-otel-lgtm/issues/132
          volumeMounts:
            - name: tempo-data
              mountPath: /data/tempo
            - name: grafana-data
              mountPath: /data/grafana
            - name: loki-data
              mountPath: /data/loki
            - name: loki-storage
              mountPath: /loki
            - name: p8s-storage
              mountPath: /data/prometheus
            - name: pyroscope-storage
              mountPath: /data/pyroscope

            - name: k3d-volume
              mountPath: /k3d-volume
          
          env:
            - name: ENABLE_LOGS_GRAFANA
              value: "true"
      volumes:
        - name: tempo-data
          emptyDir: {}
        - name: loki-data
          emptyDir: {}
        - name: grafana-data
          emptyDir: {}
        - name: loki-storage
          emptyDir: {}
        - name: p8s-storage
          emptyDir: {}
        - name: pyroscope-storage
          emptyDir: {}

        - name: k3d-volume
          hostPath:
            path: /k3d-volume